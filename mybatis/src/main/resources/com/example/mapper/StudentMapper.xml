<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<!--如果使用获取mapper的方式，这里要与接口mapper一一对应-->
<mapper namespace="com.example.mapper.StudentMapper">

    <!--二级缓存配置
    type cache接口的实现类
    size定义缓存管理的数量，也就是key的数量
    eviction缓存淘汰策略
    flushInterval缓存定时清空策略
    readOnly对象是否只读，就不存在并发干扰，性能高，若是false，会在写入的时候序列化，读的时候反序列化，所以对象要支持序列化，效率慢了，但更安全-->
    <!--如果直接配置，将作用域整个mapper-->
    <!--如果某些statement不想用缓存，则可以使用useCache=false-->
    <cache type="org.apache.ibatis.cache.impl.PerpetualCache"
           size="1024"
           eviction="LRU"
           flushInterval="12000"
           readOnly="false"/>
    <!--不同mapper引入同一缓存-->
<!--    <cache-ref namespace=""/>-->

    <!--对于公共的sql，可以通过sql抽取 include引入-->
    <sql id="selectCommon">select * from student</sql>

    <!--查询全部，分页测试-->
    <select id="selectAll" resultType="Student" useCache="false">
        <include refid="selectCommon"/>
    </select>

    <!--按照单id查询-->
    <select id="selectById" parameterType="int" resultType="Student">
        <include refid="selectCommon"/> where id = #{id}
    </select>

    <!--按照单id更新-->
    <update id="updateById" parameterType="Student">
        update student set name = #{name},age = #{age},teacher_id = #{teacherId} where id = #{id}
    </update>

    <!--按照单id删除-->
    <delete id="deleteById" parameterType="int">
        delete from student where id = #{id}
    </delete>

    <!--插入单个学生-->
    <insert id="insertOne" parameterType="Student">
        insert into student values(null,#{name},#{age},#{teacherId})
    </insert>

    <!--根据姓名查询学生，若姓名不为空，则用使用姓名查询，若为空，则查询全部-->
    <!--考察动态sql中的<if>使用-->
    <select id="selectByName" parameterType="Student" resultType="Student">
        <include refid="selectCommon"/>
        <!--如果是where子句的记得包含在where中-->
        <where>
            <if test="name!=null"><!--这面用test来进行判断-->
                and name = #{name}
            </if>
        </where>
    </select>

    <!--parameterType传参直接传具体的就可以了-->
    <select id="selectByIds" parameterType="java.util.List" resultType="Student">
        <include refid="selectCommon"/>
        <where>
            id in
            <!--想用下标就用下标即可-->
            <foreach collection="ids" item="id" open="(" close=")" index="index" separator=",">
                #{id}
            </foreach>
        </where>
    </select>

    <!--一对一查询-->
    <!--association针对一对一的场景-->
    <resultMap id="oneToOne" type="Person">
        <id column="pid" property="id"/>
        <result column="pname" property="name"/>
        <!--一次查询，嵌套结果-->
<!--        <association property="card" javaType="Card">-->
<!--            <id column="cid" property="id"/>-->
<!--            <result column="ccno" property="cardNo"/>-->
<!--        </association>-->
        <!--嵌套查询-->
        <!--这面的column就是外层查询查出的结果，内存查询想使用的话，就用这里的名字即可-->
        <association property="card" javaType="Card" select="selectByCid" column="cid"/>
    </resultMap>

    <select id="selectPersonById" parameterType="int" resultMap="oneToOne">
        select p.id pid,p.name pname,c.id cid,c.card_no ccno from person p,card c where p.cid = c.id and p.id = #{id};
    </select>

    <!--若用嵌套查询，对于子查询，一定要写resultMap-->
    <resultMap id="byCid" type="Card">
        <id property="id" column="id"/>
        <result property="cardNo" column="card_no"/>
    </resultMap>

    <select id="selectByCid" parameterType="int" resultMap="byCid">
        select * from card where id = #{cid}
    </select>

    <!--为什么会有resultMap的配置，因为多表查询字段的问题-->
    <!--尝试一下一对多-->
    <!--这里的type也是最终生成的对象保存到哪里-->
    <resultMap id="oneToMany" type="Teacher">
        <!--column就是映射的列，要与select查询出的字段对应-->
        <!--type就是想映射到type中的字段名-->
        <!--除了id字段用id，其余用result-->
        <id column="tid" property="id"/>
        <result column="tname" property="name"/>
        <!--切记，返回一个列表时，一定不是List类型-->
        <collection property="students" ofType="Student">
            <id column="sid" property="id"/>
            <result column="sname" property="name"/>
            <result column="sage" property="age"/>
            <result column="stid" property="teacherId"/>
        </collection>
    </resultMap>

    <!--一对多查询-->
    <select id="selectTeacherById" parameterType="int" resultMap="oneToMany">
        select t.id tid,t.name tname,s.id sid,s.name sname,s.age sage,s.teacher_id stid
        from teacher t,student s
        where t.id = s.teacher_id and t.id = #{id};
    </select>



</mapper>
